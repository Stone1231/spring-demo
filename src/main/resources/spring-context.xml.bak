<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<context:property-placeholder
		location="WEB-INF/*.properties, classpath*:com/demo/*/dao/impl/*.sql.properties, classpath*:com/demo/*/dao/mysql/impl/*.sql.properties, classpath*:com/demo/*/dao/mysql_dao/impl/*.sql.properties, classpath*:com/demo/*/dao/message/impl/*.sql.properties" />
	<context:component-scan base-package="com.demo" />
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- pool -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${threadService.maxPoolSize}" />
		<property name="maxPoolSize" value="${threadService.maxPoolSize}" />
		<property name="waitForTasksToCompleteOnShutdown" value="true" />
		<property name="allowCoreThreadTimeOut" value="true" />
		<property name="daemon" value="true" />
	</bean>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate" />

	<bean id="corsFilter" class="com.demo.filter.impl.CorsFilter" />

	<!-- checkRedisConnectService -->
	<bean id="checkRedisConnectService"
		class="com.demo.commons.cache.service.impl.CheckRedisConnectServiceImpl">
		<property name="pingRedisInterval"
			value="${checkRedisConnectService.pingRedisInterval}" />
	</bean>

	<bean id="cacheAspect" class="com.demo.commons.cache.aspect.CacheAspect" />

	<!-- 啟用自動代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true"
		expose-proxy="true" />
		
	<!-- threadService -->
	<bean
		id="threadService"
		class="com.demo.utils.service.impl.ThreadServiceImpl">
		<property
			name="maxExecutorSize"
			value="${threadService.maxExecutorSize}" />
		<property
			name="corePoolSize"
			value="${threadService.corePoolSize}" />
		<property
			name="keepAliveSeconds"
			value="${threadService.keepAliveSeconds}" />
		<property
			name="maxPoolSize"
			value="${threadService.maxPoolSize}" />
		<property
			name="queueCapacity"
			value="${threadService.queueCapacity}" />
		<property
			name="waitForTasksToCompleteOnShutdown"
			value="${threadService.waitForTasksToCompleteOnShutdown}" />
		<property
			name="allowCoreThreadTimeOut"
			value="${threadService.allowCoreThreadTimeOut}" />
		<property
			name="daemon"
			value="${threadService.daemon}" />
	</bean>
	
	<!-- scheduledThreadService -->
	<bean
		id="scheduledThreadService"
		class="com.demo.utils.service.impl.ScheduledThreadServiceImpl">
		<property
			name="corePoolSize"
			value="${scheduledThreadService.corePoolSize}" />
	</bean>
	
	<!-- 若要改成 kafka, 將下面1,2的 class 改成 kafka impl -->
	<!-- <bean id="rabbitService" class="com.demo.rabbitmq.service.impl.RabbitServiceImpl" /> -->
	<!-- <bean id="mqClientFactory" class="com.demo.rabbitmq.service.impl.RabbitMQClientFactoryImpl" /> -->
	<!-- <bean id="mqClient" factory-bean="mqClientFactory" factory-method="createClient" destroy-method="close" /> -->
	<!-- <bean id="mqProduceClient" factory-bean="mqClientFactory" factory-method="createProduceClient" depends-on="mqClient"/> -->
	
	<!-- <bean id="cacheManager" class="com.demo.service.RedissonManager" /> -->
</beans>
